name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'app.py'
      - 'auth.py'
      - 'config.py'
      - 'schemas.py'
      - 'error_handlers.py'
      - 'utils.py'
      - 'routes/**'
      - 'storage/**'
      - 'requirements.txt'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'app.py'
      - 'auth.py'
      - 'config.py'
      - 'schemas.py'
      - 'error_handlers.py'
      - 'utils.py'
      - 'routes/**'
      - 'storage/**'
      - 'requirements.txt'
      - '.github/workflows/ci-cd.yml'

env:
  REGISTRY: hub.cerit.io
  IMAGE_NAME: mol-view-stories

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt

    - name: Run tests (if you have them)
      run: |
        # Add your test commands here
        echo "Running tests..."
        # python -m pytest tests/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Company Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.CERIT_REGISTRY_USERNAME }}
        password: ${{ secrets.CERIT_REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.K8S_CONTEXT }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Deploy to development
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        # Set image tag based on branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          IMAGE_TAG="latest"
        else
          IMAGE_TAG="${{ github.ref_name }}"
        fi
        
        # Check if development deployment exists
        if kubectl get deployment/mol-view-stories-dev-api -n mol-view-stories-ns >/dev/null 2>&1; then
          echo "Development deployment exists, updating image..."
          # Update deployment with new image
          kubectl set image deployment/mol-view-stories-dev-api \
            mol-view-stories-dev-api-container=hub.cerit.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n mol-view-stories-ns
          
          # Restart deployment to ensure new image is pulled
          kubectl rollout restart deployment/mol-view-stories-dev-api -n mol-view-stories-ns
          
          # Wait for rollout to complete
          kubectl rollout status deployment/mol-view-stories-dev-api -n mol-view-stories-ns --timeout=300s
        else
          echo "Development deployment does not exist, creating from production deployment..."
          # Get the production deployment and create a development version
          kubectl get deployment/mol-view-stories-api -n mol-view-stories-ns -o yaml | \
            sed 's/name: mol-view-stories-api/name: mol-view-stories-dev-api/g' | \
            sed 's/mol-view-stories-api-container/mol-view-stories-dev-api-container/g' | \
            sed 's/replicas: [0-9]*/replicas: 1/g' | \
            kubectl apply -f -
          
          # Update the image to the new tag
          kubectl set image deployment/mol-view-stories-dev-api \
            mol-view-stories-dev-api-container=hub.cerit.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n mol-view-stories-ns
          
          # Wait for rollout to complete
          kubectl rollout status deployment/mol-view-stories-dev-api -n mol-view-stories-ns --timeout=300s
        fi

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig.yaml
        kubectl get pods -n mol-view-stories-ns -l app=mol-view-stories-dev-api 