name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'app.py'
      - 'auth.py'
      - 'config.py'
      - 'schemas.py'
      - 'error_handlers.py'
      - 'utils.py'
      - 'routes/**'
      - 'storage/**'
      - 'requirements.txt'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'app.py'
      - 'auth.py'
      - 'config.py'
      - 'schemas.py'
      - 'error_handlers.py'
      - 'utils.py'
      - 'routes/**'
      - 'storage/**'
      - 'requirements.txt'
      - '.github/workflows/ci-cd.yml'

env:
  REGISTRY: cerit.io
  IMAGE_NAME: ${{ secrets.CERIT_REGISTRY_USERNAME }}/mol-view-stories
  # Original: molstar/mol-view-stories (requires molstar project to exist)
  # IMAGE_NAME: molstar/mol-view-stories

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt

    - name: Run tests (if you have them)
      run: |
        # Add your test commands here
        echo "Running tests..."
        # python -m pytest tests/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Company Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.CERIT_REGISTRY_USERNAME }}
        password: ${{ secrets.CERIT_REGISTRY_PASSWORD }}

    - name: Test Docker login manually
      if: github.event_name != 'pull_request'
      run: |
        echo "=== Testing Docker login manually ==="
        echo "Testing docker login to ${{ env.REGISTRY }}"
        
        # Test if we can login with docker
        if docker login ${{ env.REGISTRY }} -u "${{ secrets.CERIT_REGISTRY_USERNAME }}" -p "${{ secrets.CERIT_REGISTRY_PASSWORD }}" 2>&1 | grep -q "Login Succeeded"; then
          echo "✓ Docker login successful - credentials are valid"
          
          # Test if we can pull a simple image (if any exist)
          echo "Testing if we can access registry with docker..."
          docker pull ${{ env.REGISTRY }}/hello-world:latest 2>/dev/null || echo "No hello-world image found (this is OK)"
          
        else
          echo "✗ Docker login failed"
          echo "This indicates a credentials or registry configuration issue"
          exit 1
        fi

    - name: Debug project permissions
      if: github.event_name != 'pull_request'
      run: |
        echo "=== Debugging Project Permissions ==="
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Target project: ${{ secrets.CERIT_REGISTRY_USERNAME }}"
        echo "Target image: ${{ env.IMAGE_NAME }}"
        
        # Since docker login works, let's test specific permissions
        echo "=== Testing user project access ==="
        USER_PROJECT_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.CERIT_REGISTRY_USERNAME }}:${{ secrets.CERIT_REGISTRY_PASSWORD }}" \
          "https://${{ env.REGISTRY }}/v2/${{ secrets.CERIT_REGISTRY_USERNAME }}/tags/list")
        echo "User project response code: $USER_PROJECT_RESPONSE"
        
        if [ "$USER_PROJECT_RESPONSE" = "200" ]; then
          echo "✓ User project exists and is accessible"
        elif [ "$USER_PROJECT_RESPONSE" = "404" ]; then
          echo "? User project doesn't exist yet (this is expected)"
          echo "Will attempt to create it during push..."
        elif [ "$USER_PROJECT_RESPONSE" = "401" ]; then
          echo "✗ User project access denied - user may not have project creation permissions"
          echo "You may need to:"
          echo "1. Contact registry admin to grant project creation permissions"
          echo "2. Use an existing project name"
          echo "3. Have the user project created manually"
        else
          echo "? User project access returned unexpected code: $USER_PROJECT_RESPONSE"
        fi
        
        echo "=== Testing catalog access (optional) ==="
        CATALOG_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.CERIT_REGISTRY_USERNAME }}:${{ secrets.CERIT_REGISTRY_PASSWORD }}" \
          "https://${{ env.REGISTRY }}/v2/_catalog")
        echo "Catalog response code: $CATALOG_RESPONSE"
        
        if [ "$CATALOG_RESPONSE" = "200" ]; then
          echo "✓ User has catalog access (admin privileges)"
        elif [ "$CATALOG_RESPONSE" = "401" ]; then
          echo "? User doesn't have catalog access (normal for regular users)"
        else
          echo "? Catalog access returned unexpected code: $CATALOG_RESPONSE"
        fi
        
        echo "=== Summary ==="
        echo "✓ Credentials are valid (docker login succeeded)"
        echo "✓ Registry is accessible"
        if [ "$USER_PROJECT_RESPONSE" = "404" ]; then
          echo "? User project will be created on first push (if user has permissions)"
        elif [ "$USER_PROJECT_RESPONSE" = "401" ]; then
          echo "✗ User may not have project creation permissions"
        fi

    - name: Try to create project with minimal push
      if: github.event_name != 'pull_request'
      run: |
        echo "=== Attempting to create user project with minimal push ==="
        
        # Check Docker authentication status
        echo "Checking Docker authentication..."
        docker info | grep -i "username" || echo "No username found in docker info"
        
        # Create a minimal Docker image to test project creation
        echo "FROM alpine:latest" > minimal.Dockerfile
        echo "CMD echo 'test'" >> minimal.Dockerfile
        
        # Try to build and push a minimal image to create the project
        docker build -f minimal.Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-create .
        
        echo "Attempting to push minimal image to create project..."
        if docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-create; then
          echo "✓ User project created successfully!"
          # Clean up the test image
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-create
        else
          echo "✗ Failed to create user project with minimal push"
          echo "Error details:"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-create 2>&1 || true
          echo "This suggests either:"
          echo "1. User lacks project creation permissions"
          echo "2. Authentication issues with the registry"
          echo "3. Registry requires different authentication method"
        fi

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        platforms: linux/amd64
        # Temporarily disable cache to isolate the issue
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

  deploy-dev:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.K8S_CONTEXT }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Deploy to development
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        # Set image tag based on branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          IMAGE_TAG="latest"
        else
          IMAGE_TAG="${{ github.ref_name }}"
        fi
        
        # Check if development deployment exists
        if kubectl get deployment/mol-view-stories-dev-api -n mol-view-stories-ns >/dev/null 2>&1; then
          echo "Development deployment exists, updating image..."
          # Update deployment with new image
          kubectl set image deployment/mol-view-stories-dev-api \
            mol-view-stories-dev-api-container=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n mol-view-stories-ns
          
          # Restart deployment to ensure new image is pulled
          kubectl rollout restart deployment/mol-view-stories-dev-api -n mol-view-stories-ns
          
          # Wait for rollout to complete
          kubectl rollout status deployment/mol-view-stories-dev-api -n mol-view-stories-ns --timeout=300s
        else
          echo "Development deployment does not exist, creating from production deployment..."
          # Get the production deployment and create a development version
          kubectl get deployment/mol-view-stories-api -n mol-view-stories-ns -o yaml | \
            sed 's/name: mol-view-stories-api/name: mol-view-stories-dev-api/g' | \
            sed 's/mol-view-stories-api-container/mol-view-stories-dev-api-container/g' | \
            sed 's/replicas: [0-9]*/replicas: 1/g' | \
            kubectl apply -f -
          
          # Update the image to the new tag
          kubectl set image deployment/mol-view-stories-dev-api \
            mol-view-stories-dev-api-container=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n mol-view-stories-ns
          
          # Wait for rollout to complete
          kubectl rollout status deployment/mol-view-stories-dev-api -n mol-view-stories-ns --timeout=300s
        fi

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig.yaml
        kubectl get pods -n mol-view-stories-ns -l app=mol-view-stories-dev-api 