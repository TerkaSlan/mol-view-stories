name: API Production Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
      confirm_deployment:
        description: 'Confirm production deployment'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: hub.cerit.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    if: inputs.confirm_deployment == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.K8S_CONTEXT }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Verify cluster access
      run: |
        export KUBECONFIG=kubeconfig.yaml
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        IMAGE_TAG="${{ inputs.image_tag }}"
        FULL_IMAGE="hub.cerit.io/${{ github.repository }}:${IMAGE_TAG}"
        
        echo "Deploying image: ${FULL_IMAGE}"
        
        # Update deployment with new image
        kubectl set image deployment/mol-view-stories-api \
          mol-view-stories-api-container=${FULL_IMAGE} \
          -n mol-view-stories-ns
        
        # Set MinIO environment variables for production
        echo "Setting MinIO environment variables for production..."
        kubectl set env deployment/mol-view-stories-api \
          -n mol-view-stories-ns \
          -c mol-view-stories-api-container \
          MINIO_ENDPOINT="${{ secrets.MINIO_PROD_URL }}" \
          MINIO_ACCESS_KEY="${{ secrets.MINIO_PROD_USERNAME }}" \
          MINIO_SECRET_KEY="${{ secrets.MINIO_PROD_PASSWORD }}" \
          MINIO_BUCKET="root"
        
        # Restart deployment to ensure new image is pulled
        kubectl rollout restart deployment/mol-view-stories-api -n mol-view-stories-ns
        
        # Wait for rollout to complete
        kubectl rollout status deployment/mol-view-stories-api -n mol-view-stories-ns --timeout=600s

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        # Check pod status
        kubectl get pods -n mol-view-stories-ns -l deployment-id=mol-view-stories-api
        
        # Check service status
        kubectl get svc -n mol-view-stories-ns
        
        # Check ingress status
        kubectl get ingress -n mol-view-stories-ns

    - name: Health check
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get the service URL (you might need to adjust this based on your ingress)
        SERVICE_URL="https://stories.molstar.org"
        
        # Perform health check
        echo "Performing health check on ${SERVICE_URL}"
        curl -f -s "${SERVICE_URL}/ready" || echo "Health check failed"

    - name: Deployment Summary
      run: |
        echo "## Production Deployment Complete âœ…" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Deployed**: hub.cerit.io/${{ github.repository }}:${{ inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 